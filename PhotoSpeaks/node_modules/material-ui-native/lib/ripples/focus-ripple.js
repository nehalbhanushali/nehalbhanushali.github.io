'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _reactNative = require('../../../react-native');

var _reactNative2 = _interopRequireDefault(_reactNative);

/*import ReactDOM from 'react-dom';*/
/*import PureRenderMixin from 'react-addons-pure-render-mixin';*/

var _mixinsStylePropable = require('../mixins/style-propable');

var _mixinsStylePropable2 = _interopRequireDefault(_mixinsStylePropable);

/*import AutoPrefix from '../styles/auto-prefix';*/

var _stylesColors = require('../styles/colors');

var _stylesColors2 = _interopRequireDefault(_stylesColors);

var _stylesTransitions = require('../styles/transitions');

var _stylesTransitions2 = _interopRequireDefault(_stylesTransitions);

var _transitionGroupsScaleIn = require('../transition-groups/scale-in');

var _transitionGroupsScaleIn2 = _interopRequireDefault(_transitionGroupsScaleIn);

var pulsateDuration = 750;

var View = _reactNative2['default'].View;

var FocusRipple = _reactNative2['default'].createClass({
  displayName: 'FocusRipple',

  mixins: [/*PureRenderMixin, */_mixinsStylePropable2['default']],

  propTypes: {
    color: _reactNative2['default'].PropTypes.string,
    innerStyle: _reactNative2['default'].PropTypes.object,
    opacity: _reactNative2['default'].PropTypes.number,
    show: _reactNative2['default'].PropTypes.bool,
    style: _reactNative2['default'].PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      color: _stylesColors2['default'].darkBlack
    };
  },

  componentDidMount: function componentDidMount() {
    if (this.props.show) {
      this._setRippleSize();
      this._pulsate();
    }
  },

  componentDidUpdate: function componentDidUpdate() {
    if (this.props.show) {
      this._setRippleSize();
      this._pulsate();
    } else {
      if (this._timeout) clearTimeout(this._timeout);
    }
  },

  render: function render() {
    var _props = this.props;
    var show = _props.show;
    var style = _props.style;

    var mergedRootStyles = this.mergeStyles({
      //height: '100%',
      //width: '100%',
      position: 'absolute',
      top: 0,
      left: 0
    }, style);

    var ripple = show ? this._getRippleElement(this.props) : null;

    return _reactNative2['default'].createElement(
      _transitionGroupsScaleIn2['default'],
      {
        maxScale: 0.85,
        style: mergedRootStyles },
      ripple
    );
  },

  _getRippleElement: function _getRippleElement(props) {
    var color = props.color;
    var innerStyle = props.innerStyle;
    var opacity = props.opacity;

    var innerStyles = this.mergeAndPrefix({
      position: 'absolute',
      //height: '100%',
      //width: '100%',
      //TODO: borderRadius: '50%',
      opacity: opacity ? opacity : 0.16,
      backgroundColor: color
    }, //transition: Transitions.easeOut(pulsateDuration + 'ms', 'transform', null, Transitions.easeInOutFunction),
    innerStyle);

    return _reactNative2['default'].createElement(View, { ref: 'innerCircle', style: innerStyles });
  },

  _pulsate: function _pulsate() {
    if (!this.isMounted()) return;

    /*    let innerCircle = ReactDOM.findDOMNode(this.refs.innerCircle);*/
    if (!innerCircle) return;

    var startScale = 'scale(1)';
    var endScale = 'scale(0.85)';
    var currentScale = innerCircle.style.transform;
    var nextScale = undefined;

    currentScale = currentScale || startScale;
    nextScale = currentScale === startScale ? endScale : startScale;

    /*    AutoPrefix.set(innerCircle.style, 'transform', nextScale);*/
    this._timeout = setTimeout(this._pulsate, pulsateDuration);
  },

  _setRippleSize: function _setRippleSize() {
    /*    let el = ReactDOM.findDOMNode(this.refs.innerCircle);*/
    var height = el.offsetHeight;
    var width = el.offsetWidth;
    var size = Math.max(height, width);

    var oldTop = 0;
    // For browsers that don't support endsWith()
    if (el.style.top.indexOf('px', el.style.top.length - 2) !== -1) {
      oldTop = parseInt(el.style.top);
    }
    el.style.height = size + 'px';
    el.style.top = height / 2 - size / 2 + oldTop + 'px';
  }

});

exports['default'] = FocusRipple;
module.exports = exports['default'];