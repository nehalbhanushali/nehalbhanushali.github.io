'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _reactNative = require('../../../react-native');

var _reactNative2 = _interopRequireDefault(_reactNative);

var _paper = require('../paper');

var _paper2 = _interopRequireDefault(_paper);

var _mixinsStylePropable = require('../mixins/style-propable');

var _mixinsStylePropable2 = _interopRequireDefault(_mixinsStylePropable);

var _cardExpandable = require('./card-expandable');

var _cardExpandable2 = _interopRequireDefault(_cardExpandable);

var View = _reactNative2['default'].View;

var Card = _reactNative2['default'].createClass({
  displayName: 'Card',

  mixins: [_mixinsStylePropable2['default']],

  getInitialState: function getInitialState() {
    return { expanded: this.props.initiallyExpanded ? true : false };
  },

  propTypes: {
    style: _reactNative2['default'].PropTypes.object,
    expandable: _reactNative2['default'].PropTypes.bool,
    initiallyExpanded: _reactNative2['default'].PropTypes.bool,
    onExpandChange: _reactNative2['default'].PropTypes.func,
    actAsExpander: _reactNative2['default'].PropTypes.bool,
    showExpandableButton: _reactNative2['default'].PropTypes.bool
  },

  _onExpandable: function _onExpandable() {
    var newExpandedState = !(this.state.expanded === true);
    this.setState({ expanded: newExpandedState });
    if (this.props.onExpandChange) this.props.onExpandChange(newExpandedState);
  },

  render: function render() {
    var _this = this;

    var lastElement = undefined;
    var newChildren = _reactNative2['default'].Children.map(this.props.children, function (currentChild) {
      var doClone = false;
      var newChild = undefined;
      var newProps = {};
      var element = currentChild;
      if (!currentChild || !currentChild.props) {
        return null;
      }
      if (_this.state.expanded === false && currentChild.props.expandable === true) return;
      if (currentChild.props.actAsExpander === true) {
        doClone = true;
        newProps.onTouchTap = _this._onExpandable;
        newProps.style = _this.mergeStyles({ cursor: 'pointer' }, currentChild.props.style);
      }
      if (currentChild.props.showExpandableButton === true) {
        doClone = true;
        newChild = _reactNative2['default'].createElement(_cardExpandable2['default'], { expanded: _this.state.expanded, onExpanding: _this._onExpandable });
      }
      if (doClone) {
        element = _reactNative2['default'].cloneElement(currentChild, newProps, currentChild.props.children, newChild);
      }
      return element;
    }, this);

    // If the last element is text or a title we should add
    // 8px padding to the bottom of the card
    var addBottomPadding = lastElement && (lastElement.type.displayName === 'CardText' || lastElement.type.displayName === 'CardTitle');
    var _props = this.props;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['style']);

    var mergedStyles = this.mergeStyles({
      overflow: 'hidden'
    }, //zIndex: 1,
    style);

    return _reactNative2['default'].createElement(
      _paper2['default'],
      _extends({}, other, { style: mergedStyles }),
      _reactNative2['default'].createElement(
        View,
        { style: { paddingBottom: addBottomPadding ? 8 : 0 } },
        newChildren
      )
    );
  }
});

exports['default'] = Card;
module.exports = exports['default'];