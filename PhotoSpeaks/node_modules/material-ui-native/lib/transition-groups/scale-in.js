'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _reactNative = require('../../../react-native');

var _reactNative2 = _interopRequireDefault(_reactNative);

/*import PureRenderMixin from 'react-addons-pure-render-mixin';*/
/*import ReactTransitionGroup from 'react-addons-transition-group';*/

var _mixinsStylePropable = require('../mixins/style-propable');

var _mixinsStylePropable2 = _interopRequireDefault(_mixinsStylePropable);

var _scaleInChild = require('./scale-in-child');

var _scaleInChild2 = _interopRequireDefault(_scaleInChild);

var _stylesRawThemesLightRawTheme = require('../styles/raw-themes/light-raw-theme');

var _stylesRawThemesLightRawTheme2 = _interopRequireDefault(_stylesRawThemesLightRawTheme);

var _stylesThemeManager = require('../styles/theme-manager');

var _stylesThemeManager2 = _interopRequireDefault(_stylesThemeManager);

var ScaleIn = _reactNative2['default'].createClass({
  displayName: 'ScaleIn',

  mixins: [/*PureRenderMixin, */_mixinsStylePropable2['default']],

  contextTypes: {
    muiTheme: _reactNative2['default'].PropTypes.object
  },

  //for passing default theme context to children
  childContextTypes: {
    muiTheme: _reactNative2['default'].PropTypes.object
  },

  getChildContext: function getChildContext() {
    return {
      muiTheme: this.state.muiTheme
    };
  },

  getInitialState: function getInitialState() {
    return {
      muiTheme: this.context.muiTheme ? this.context.muiTheme : _stylesThemeManager2['default'].getMuiTheme(_stylesRawThemesLightRawTheme2['default'])
    };
  },

  //to update theme inside state whenever a new theme is passed down
  //from the parent / owner using context
  componentWillReceiveProps: function componentWillReceiveProps(nextProps, nextContext) {
    var newMuiTheme = nextContext.muiTheme ? nextContext.muiTheme : this.state.muiTheme;
    this.setState({ muiTheme: newMuiTheme });
  },

  propTypes: {
    childStyle: _reactNative2['default'].PropTypes.object,
    enterDelay: _reactNative2['default'].PropTypes.number,
    maxScale: _reactNative2['default'].PropTypes.number,
    minScale: _reactNative2['default'].PropTypes.number,
    style: _reactNative2['default'].PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      enterDelay: 0
    };
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var childStyle = _props.childStyle;
    var enterDelay = _props.enterDelay;
    var maxScale = _props.maxScale;
    var minScale = _props.minScale;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['children', 'childStyle', 'enterDelay', 'maxScale', 'minScale', 'style']);

    var mergedRootStyles = this.prepareStyles({
      position: 'relative',
      overflow: 'hidden'
    }, //height: '100%',
    style);

    var newChildren = _reactNative2['default'].Children.map(children, function (child) {
      return _reactNative2['default'].createElement(
        _scaleInChild2['default'],
        {
          key: child.key,
          enterDelay: enterDelay,
          maxScale: maxScale,
          minScale: minScale,
          style: childStyle },
        child
      );
    });

    /*<ReactTransitionGroup
      {...other}
      style={mergedRootStyles}
      component="div">
      {newChildren}
    </ReactTransitionGroup>*/
    return;
  }

});

exports['default'] = ScaleIn;
module.exports = exports['default'];